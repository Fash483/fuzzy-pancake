version: 1.0.{build}
image: Ubuntu

install:
  - sudo apt install -y python3 python3-pip curl
  - pip install requests
  - mkdir -p downloads

build_script:
  - echo "Creating test files..."
  - echo "This is Zim content." > "downloads/Invader ZIM - S00E07 - The Music of Zim (1080p x265 EDGE2020).txt"
  - echo "This is Sjsjsnn." > "downloads/Sjsjsnn [EZTVX.TO].txt"
  - echo "Creating subfolder and test file: NestedFile.txt"
  - mkdir -p "downloads/subfolder"
  - echo "Nested content." > "downloads/subfolder/NestedFile.txt"

  - echo "Running Python script to create filebin_upload.py..."
  - |
    python -c "
import os
import requests
import concurrent.futures

# Define the directory containing the files and the URL
directory = 'downloads'  # Folder containing files to upload
url_template = 'https://filebin.net/n7ahw0c7muwhwwbx/{filename}'  # Placeholder for filename

# Function to upload a single file
def upload_file(file_path):
    filename = os.path.relpath(file_path, directory)
    filename = filename.replace(os.sep, '_')  # Flatten the folder structure
    url = url_template.format(filename=filename)

    with open(file_path, 'rb') as f:
        response = requests.post(url, headers={
            'accept': 'application/json',
            'Content-Type': 'application/octet-stream'
        }, data=f)
    return response.status_code, filename, response.text

# Recursively gather all files in directory and subdirectories
files_to_upload = []
for root, dirs, files in os.walk(directory):
    for file in files:
        file_path = os.path.join(root, file)
        files_to_upload.append(file_path)

# Upload files concurrently using ThreadPoolExecutor
with concurrent.futures.ThreadPoolExecutor() as executor:
    future_to_file = {executor.submit(upload_file, file): file for file in files_to_upload}
    for future in concurrent.futures.as_completed(future_to_file):
        try:
            status_code, filename, response_data = future.result()
            print(f'File: {filename}, Status Code: {status_code}, Response: {response_data}')
        except Exception as e:
            print(f'Error uploading {future_to_file[future]}: {e}')
    "
  
